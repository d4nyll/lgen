import XLSX from 'xlsx';

var processData = function(csv) {
    var allTextLines = csv.split(/\r\n|\n/);
    var yo = allTextLines[0]
        .replace("No.", "studentId")
        .replace("Absent", "absent")
        .replace("Clock In", "clockIn")
        .replace("Date", "date")
        .replace("Department", "department")
        .replace("Late", "late")
        .replace("Name", "name")
        .replace(' ', '');
    allTextLines[0] = yo;
    let joined = allTextLines.join("\n");
    //log.info("processData, allTextLines", joined);
    return joined;
};

var clearData = function () {
    Session.set('imported-attendance', undefined);
    $('#AdminUploadAttendance__upload-xlsx').val("");
    $('#AdminUploadAttendance__upload-csv').val("");
};

////we need to clear the empty lines often regenerated by XL to csv file export/
//this clean up is not done by papa parse
var removeEmptyRows = (results) => {
    let resultArray = results.data;
    let cleanRows = [];
    let removedRowsCount = 0;
    //log.info("Before count- init", resultArray.length);
    for (let rowi = 0; rowi < resultArray.length; rowi++) {
        let allFieldsEmpty = true;
        let rowObj = resultArray [rowi];
        //log.info("results.data[", jj, "]", row);
        Object.keys(rowObj).every(function (key) {
            let value = rowObj[key];
            if (value.length > 0) {
                allFieldsEmpty = false;
                //http://stackoverflow.com/questions/6260756/how-to-stop-javascript-foreach
                return false;
            }
        });
        // if ( allFieldsEmpty) {
        //     resultArray.splice(rowi, 1);
        // }
        //we reverse the logic as for some reason the removal doesn't remove all empty fields
        if  ( !allFieldsEmpty) {
            //log.info(rowi, "is not empty ", rowObj);
            cleanRows.push(rowObj);
        }
    }
    return cleanRows;
    //log.info("After count", resultArray.length);
    //log.info("After count2", resultArray2.length);
    //log.info("Removed rows", removedRowsCount);
};

Template.AdminUploadAttendance.events({
    // 'change #AdminUploadAttendance__upload-xlsx': function (event, template) {
        
    //     var files = event.currentTarget.files;
    //     var file = files[0];
    //     var reader = new FileReader();
    //     reader.onload = function(e) {
    //         var data = this.result;
    //         var workbook = XLSX.read(data, {type: 'binary'});
    //         var first_sheet_name = workbook.SheetNames[0];
    //         var attendanceAsJSON = XLSX.utils.sheet_to_json(workbook.Sheets[first_sheet_name]);
            
    //         var fieldMap = {
    //             "Absent": 'absent',
    //             "Clock In": 'clockIn',
    //             "Date": 'date',
    //             "Department": 'department',
    //             "Late": 'late',
    //             "Name": 'name'
    //         };
            
    //         processedAttendanceJSON = [];
    //         _.each(attendanceAsJSON, function(object) {
    //             return processedAttendanceJSON.push(_.reduce(object, function(finalObject, value, key) {
    //                 key = fieldMap[key] || key;
    //                 finalObject[key] = value;
    //                 return finalObject;
    //             }, {}));
    //         });
            
    //         Session.set('imported-attendance', processedAttendanceJSON);
    //     };
    //     reader.readAsBinaryString(file);
    // },
    
    'change #AdminUploadAttendance__upload-csv': function (event, template) {
        var files = event.currentTarget.files;
        var file = files[0];
        var reader = new FileReader();
        reader.onload = function() {
            parsedResults = processData(this.result);
            //log.info("parsedResults", parsedResults);
            var data = Papa.parse(parsedResults, {
                header: true,
                dynamicTyping: false,
                skipEmptyLines: true,
                complete: function (results, file) {
                    //we need to clear the empty lines often regenerate by XL to csv file export.
                    let cleanRows = removeEmptyRows(results);
                    Session.set('imported-attendance', cleanRows);
                },
                error: function (error, file) {
                    log.info(error);
                }
            });
        };
        reader.readAsText(file);
    },
    
    'click #AdminUploadAttendance__submit': function (event, template) {
        Meteor.call('smartix:absence/updateAttendanceRecord',
            Session.get('imported-attendance'),
            UI._globalHelpers['getCurrentSchoolName'](), function (err, res) {
            if(!err) {
                // Toaster to notify success
                log.info(res);
                if(res.insertCount) {
                    toastr.info(res.insertCount + TAPi18n.__("Admin.RecordsUpdateSuccess"));
                }
                if(res.errors) {
                    toastr.error(res.errors);
                }
            } else {
                toastr.error(err.details);
            }
        });
        clearData();
    },
    'click #AdminUploadAttendance__clear': function () {
        clearData();
    }
});

Template.AdminUploadAttendance.helpers({
    importedAttendance: function () {
        return Session.get('imported-attendance');
    }
});

Template.AdminUploadAttendance.onDestroyed(function () {
    Session.set('imported-attendance', undefined);
});